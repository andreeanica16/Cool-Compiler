sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(intStrBoolTags, constants, classes_name, classes_obj, classes_disp_table, methods,
    boolTag, classes_prot_obj) ::= <<
.data
    .align  2
    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  bool_const0
    .globl  bool_const1
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag

<intStrBoolTags>

bool_const0:
    .word   <boolTag>
    .word   4
    .word   Bool_dispTab
    .word   0
bool_const1:
    .word <boolTag>
    .word   4
    .word   Bool_dispTab
    .word   1

<constants>

class_nameTab:
<classes_name>

class_objTab:
<classes_obj>

<classes_prot_obj>

<classes_disp_table>

    .globl  heap_start
heap_start:
    .word   0
    .text
    .globl Int_init
    .globl String_init
    .globl Bool_init
    .globl Main_init
    .globl Main.main
<methods>
>>

intStrBoolTag(name, tag) ::= <<
_<name>_tag:
    .word   <tag>
>>

classObjTab(className) ::= <<
    .word   <className>_protObj
    .word   <className>_init
>>

initObject() ::= <<
Object_init:
    addiu   $sp $sp -12
    sw  $fp 12($sp)
    sw  $s0 8($sp)
    sw  $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    move    $a0 $s0
    lw  $fp 12($sp)
    lw  $s0 8($sp)
    lw  $ra 4($sp)
    addiu   $sp $sp 12
    jr  $ra

>>

initClass(class_name, parent_name, classMembers) ::= <<
<class_name>_init:
    addiu   $sp $sp -12
    sw  $fp 12($sp)
    sw  $s0 8($sp)
    sw  $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal <parent_name>_init
<classMembers>
    move    $a0 $s0
    lw  $fp 12($sp)
    lw  $s0 8($sp)
    lw  $ra 4($sp)
    addiu   $sp $sp 12
    jr  $ra
>>

classProtObj(tag, words, class_name, classMembers) ::= <<
<class_name>_protObj:
    .word   <tag>
    .word   <words>
    .word   <class_name>_dispTab
<classMembers>
>>

dispTabEntry(method) ::= <<
    .word   <method>
>>

classDispTab(class_name, methods, heap_start) ::= <<
<class_name>_dispTab:
<methods>
<heap_start>
>>

literal(value) ::= <<
    la  $a0 <value>
>>

intConstant(intTag, value) ::= <<
int_const<value>:
    .word   <intTag>
    .word   4
    .word   Int_dispTab
    .word   <value>
>>

strConstant(position, strTag, value, words, actual_len) ::= <<
str_const<position>:
    .word   <strTag>
    .word   <words>
    .word   String_dispTab
    .word   <actual_len>
    .asciiz "<value>"
    .align  2
>>

funcDef(className, funcName, paramsOffset, body) ::= <<
<className>.<funcName>:
    addiu   $sp $sp -12
    sw  $fp 12($sp)
    sw  $s0 8($sp)
    sw  $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
<body>
    lw  $fp 12($sp)
    lw  $s0 8($sp)
    lw  $ra 4($sp)
    addiu   $sp $sp <paramsOffset>
    jr  $ra
>>

implicit_dispatch(method_id, filename, line, params, method_offset) ::= <<
<params>
	move    $a0 $s0
	bnez    $a0 dispatch_<method_id>
	la      $a0 <filename>
	li      $t1 <line>
	jal     _dispatch_abort
dispatch_<method_id>:
	lw      $t1 8($a0)
    lw      $t1 <method_offset>($t1)
    jalr    $t1
>>

funcParam(param) ::= <<
<param>
	sw      $a0 0($sp)
    addiu   $sp $sp -4
>>

explicit_dispatch(method_id, filename, line, params, method_offset, member_caller, atType) ::= <<
<params>
<member_caller>
	bnez    $a0 dispatch_<method_id>
	la      $a0 <filename>
	li      $t1 <line>
	jal     _dispatch_abort
dispatch_<method_id>:
<if (atType)>
	la		$t1 <atType>_dispTab
<else>
	lw      $t1 8($a0)
<endif>
    lw      $t1 <method_offset>($t1)
    jalr    $t1
>>

attribLocalVar(val, offset) ::= <<
<val>
    sw  $a0 <offset>($fp)
>>

attribClassMember(val, offset) ::= <<
<val>
    sw  $a0 <offset>($s0)
>>

getLocalVar(val, offset) ::= <<
<val>
    lw  $a0 <offset>($fp)
>>

getClassMember(val, offset) ::= <<
<val>
    lw  $a0 <offset>($s0)
>>

self() ::= <<
	move	$a0 $s0
>>

id() ::= <<
>>

letLocalsAlloc(offset, stored_params) ::= <<
	addiu	$sp $sp <offset>
<stored_params>
>>

new(class_name) ::= <<
    la  $a0 <class_name>_protObj
	jal Object.copy
	jal <class_name>_init
>>

newSelfType() ::= <<
    la      $t1 class_objTab
    lw      $t2 0($s0)          # class tag
    sll     $t2 $t2 3           # *8
    addu    $t1 $t1 $t2         # class_objTab + 8 * tag
    sw      $t1 0($sp)
    addiu   $sp $sp -4
    lw      $a0 0($t1)          # _protObj
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 4($t1)          # _init
    jalr    $t1

>>

if(cond, then, elsee, if_count) ::= <<
<cond>
	lw      $t1 12($a0)     # bool slot
	beqz    $t1 else_<if_count>
<then>
	b   endif<if_count>
else_<if_count>:
<elsee>
endif<if_count>:
>>

isvoid(expr, isvoid_count) ::= <<
<expr>
    move    $t1 $a0
    la      $a0 bool_const1
    beqz    $t1 isvoid<isvoid_count>
    la      $a0 bool_const0
isvoid<isvoid_count>:
>>

not(expr, not_count) ::= <<
<expr>
	lw		$t1 12($a0)
	la		$a0 bool_const1
	beqz	$t1 not<not_count>
	la		$a0 bool_const0
not<not_count>:
>>


binaryOperation(op, left, right) ::= <<
<left>
	sw		$a0 0($sp)
	addiu	$sp $sp -4
<right>
	jal		Object.copy
	lw		$t1 4($sp)
	addiu	$sp $sp 4
	lw		$t1 12($t1)
	lw		$t2 12($a0)
	<op>	$t1 $t1 $t2
	sw		$t1 12($a0)
>>

neg(neg_count, expr) ::= <<
<expr>
	lw		$t1 12($a0)
	neg		$t1 $t1
	sw		$t1 12($a0)
>>

equality(left, right, eq_cnt) ::= <<
<left>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<right>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    move    $t2 $a0
    la      $a0 bool_const1
    beq     $t1 $t2 eq<eq_cnt>
    la      $a1 bool_const0
    jal     equality_test
eq<eq_cnt>:
>>

compare(compare_cnt, left, right, op) ::= <<
<left>
	sw		$a0 0($sp)
	addiu	$sp $sp -4
<right>
	lw		$t1 4($sp)
	addiu	$sp $sp 4
	lw		$t1 12($t1)
	lw		$t2 12($a0)
	la		$a0 bool_const1
	<op>	$t1 $t2 compare_<compare_cnt>
	la		$a0 bool_const0
compare_<compare_cnt>:
>>

while(while_count, cond, body) ::= <<
while_<while_count>:
<cond>
	lw		$t1 12($a0)
	beqz	$t1 end_while_<while_count>
<body>
	b		while_<while_count>
end_while_<while_count>:
	li		$a0 0
>>

case(expr, case_count, branches, filename, line, class_tag) ::= <<
    addiu   $sp $sp -4   # locals alloc
    move    $s0 $a0
<expr>
    bnez    $a0 case<case_count>
    la      $a0 <filename>
    li      $t1 <line>
    jal     _case_abort2
case<case_count>:
    sw      $a0 -4($fp)
    lw      $t1 0($a0)      # class tag
<branches>
	lw		$a0 -4($fp)
	jal		_case_abort
endcase<case_count>:
    addiu   $sp $sp 4    # locals free

>>

caseOption(body, class_tag, class_max_tag, next_branch_count, case_count) ::= <<
	blt		$t1 <class_tag> casebranch<next_branch_count>
	bgt     $t1 <class_max_tag> casebranch<next_branch_count>
<body>
	b		endcase<case_count>
casebranch<next_branch_count>:
>>